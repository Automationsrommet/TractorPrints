//Parametric electrical box for tractor light wiring

//Input parameters

boltdiameter=6;
nutdiameter=11.5;
boltlength=20;
boltheadlength=4;
boltcount=5;
distance=25;
groundboltnumber=1;
detail=20;
cables=3;
cabledia=8;
margin=0.3;
walls=4;
heigth=36;
$fn=detail;

//Usage: Call parts(1) or parts(2) for base or lid
part(2);
//part(2);
//nuts();
//patentband();
//ringdisc();
//bolt();
//labels();
module part(component){
if ((component==1)||(component==3)){
difference(){
enclosure();
spot();
axis();
labels();
}
}
if (component>=2){
difference(){
lid();
axis();
labels();
}
}

}
    module labels(){
      translate([-18,-3,heigth])linear_extrude(2)text("MF 135",8);  
        translate([-18,-12,heigth])linear_extrude(2)text("12 VOLT",7);
       translate([-18,-24,heigth])linear_extrude(2)text("Elektrisk",7);         
       translate([-20,-34,heigth])linear_extrude(2)text("lyskobling",7);
       translate([-0,-59,heigth])linear_extrude(height=2)oshw_logo_2d(25);
       translate([-15,-80,heigth])linear_extrude(2)text("OPEN",8);        
       translate([-23.5,-88,heigth])linear_extrude(2)text("HARDWARE",6);
        
       translate([26,-134,1])rotate([90,0,90])linear_extrude(1)text("AUTOMATIONSROMMET @ GITHUB",6); 
        
       translate([-20,4,0])linear_extrude(2)text("Jording",8); 
       translate([-20,-9,-0])linear_extrude(2)text("Innfeste",8); 
       translate([-20,-22,0])linear_extrude(2)text("BAKLYS",8);        
       translate([-20,-21-distance,0])linear_extrude(2)text("H.BLINK",8);        
       translate([-20,-21-2*distance,0])linear_extrude(2)text("V.BLINK",8);        
       translate([-20,-21-3*distance,0])linear_extrude(2)text("RYGGE",8);        
       translate([-20,-21-4*distance,0])linear_extrude(2)text("ARBEID",8);
        
    }
module lid(){
    
    color("green")difference(){
        translate([0,-(boltcount)*distance/2,boltlength*0.55])minkowski(){
      cube([1.6*distance+walls*2,boltcount*distance+distance+walls*2,boltlength+distance/2+walls*2],center=true);
      sphere(boltdiameter);
  }
        translate([0,-(boltcount)*distance/2,boltlength*0.55])minkowski(){
      cube([1.6*distance+walls/2+margin*3,boltcount*distance+distance+walls/2+margin*3,boltlength+distance/2+walls/2+margin*3],center=true);
      sphere(boltdiameter);
  }
  
  translate([0,0,-nutdiameter*1.5])rotate([90,0,0])minkowski(){
  cylinder(distance*boltcount+distance,distance*1.5,distance*0.8,center=false);
  sphere(boltdiameter*2);
      }
       translate([0,distance,-distance+boltdiameter])rotate([00,0,0])minkowski(){
  cylinder(boltlength+nutdiameter,distance*1.5,distance*0.9,center=false);
  sphere(boltdiameter*2);
      }
  }
  for(i=[-1:2:1]){
  color("darkgreen")translate([i*(1.8*distance+walls*4)/2,nutdiameter+nutdiameter/6,boltlength+nutdiameter/2])rotate([90,0,90*i])
  cylinder(walls*1.3,nutdiameter/2+3*margin,nutdiameter/2,center=true);
}
}
module axis() {
   color("red")translate([0,nutdiameter+nutdiameter/4,boltlength+nutdiameter/4])rotate([90,0,90])
  cylinder(distance*boltcount+distance,boltdiameter/4,boltdiameter/4,center=true);
}
module enclosure(){
    difference(){
        translate([0,-(boltcount)*distance/2,boltlength/2+boltdiameter/2])minkowski(){
      cube([1.6*distance+walls/2,boltcount*distance+distance+walls/2,boltlength+distance/2+walls/2],center=true);
      sphere(boltdiameter);
  }
  translate([0,-(boltcount)*distance/2,boltlength/2+boltdiameter/2+walls*1.6])minkowski(){
      cube([1.6*distance-walls/2,boltcount*distance+distance-walls/2,boltlength+distance/4-walls/2],center=true);
      sphere(boltdiameter);
  }  
  translate([0,0,boltlength+walls*4])rotate([90,0,0])minkowski(){
  cylinder(distance*boltcount+distance,distance+walls,distance+walls,center=false);
  sphere(boltdiameter);
      }
  }
}

module spot(){
    color("red")for (i=[1:1:boltcount]){
        translate([0,-i*distance,-nutdiameter])sphere(nutdiameter,$fn=12);
        translate([0,-i*distance,-boltheadlength/2])cylinder(boltheadlength+2*margin,nutdiameter/2+margin,nutdiameter/2+margin,center=true,$fn=6);
        }
        color("grey")for (i=[0:1:boltcount]){
        color("silver")translate([0,-i*distance,0])cylinder(boltlength,boltdiameter/2+margin,boltdiameter/2+margin,center=true);
        }
        }
module bolt(){
   color("silver")translate([0,0,-boltheadlength/2])cylinder(boltheadlength,nutdiameter/2,nutdiameter/2,center=true,$fn=6);
    color("silver")translate([0,0,boltlength/2])cylinder(boltlength,boltdiameter/2,boltdiameter/2,center=true);
}
module gear_tooth_2d(d) {
	polygon( points=[ 
			[0.0,10.0*d/72.0], [0.5*d,d/15.0], 
			[0.5*d,-d/15.0], [0.0,-10.0*d/72.0] ] );
}

module oshw_logo_2d(d=10.0) {
	rotate(-135) {
		difference() {
			union() {
				circle(r=14.0*d/36.0,$fn=20);
				for(i=[1:7]) assign(rotAngle=45*i+45)
					rotate(rotAngle) gear_tooth_2d(d);
			}
			circle(r=10.0*d/72.0,$fn=20);
			intersection() {
	  			rotate(-20) square(size=[10.0*d/18.0,10.0*d/18.0]);
	  			rotate(20)  square(size=[10.0*d/18.0,10.0*d/18.0]);
			}
    		}
  	}
}

// usage : oshw_logo_2d(diameter)
